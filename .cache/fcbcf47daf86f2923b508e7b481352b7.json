{"dependencies":[{"name":"/Users/karabayse/Documents/Prime/Tier4/Traversy Media/JavaScript/reddit-search-app/package.json","includedInParent":true,"mtime":1525448615239},{"name":"/Users/karabayse/Documents/Prime/Tier4/Traversy Media/JavaScript/reddit-search-app/node_modules/redditapi/package.json","includedInParent":true,"mtime":1525448615200},{"name":"./Post","loc":{"line":1,"column":21}},{"name":"snekfetch","loc":{"line":2,"column":24}}],"generated":{"js":"const Post = require('./Post');\r\nconst { get } = require('snekfetch');\r\n\r\n/**\r\n  * @param {string} subReddit The sub reddit to search for\r\n  * @param {number} amount The amount of searches to return\r\n  * @param {string} topic Either `hot`, `new`, `rising`, `controversial` or `top`\r\n  * @returns {Promise<Object>} Object containing posts for this sub reddit\r\n  */\r\n\r\nmodule.exports = (subReddit, amount, topic = 'new') => {\r\n  return new Promise(async (resolve, reject) => {\r\n    if (typeof subReddit !== 'string' || typeof subReddit === 'undefined') reject('You must supply a sub reddit to search for.');\r\n    typeof amount === 'undefined'\r\n      ? reject('You must supply an amount of posts to search for.')\r\n      : isNaN(parseInt(amount))\r\n      ? reject('Amount must be a number 0-9.')\r\n      : amount < 1 || amount > 24\r\n      ? reject('Amount must be between 1 and 25.')\r\n      : true;\r\n\r\n    const data = await get(`https://www.reddit.com/r/${subReddit}/${topic}.json`);\r\n    if (!data.body.data.children.length) reject('That sub reddit does not exist or there are no posts.');\r\n    resolve({\r\n      searches: data.body.data.children.length - 1,\r\n      posts: data.body.data.children.slice(25 - amount).map(post => new Post(post))\r\n    });\r\n  });\r\n};\r\n","map":{"mappings":[{"source":"node_modules/redditapi/src/Client.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/redditapi/src/Client.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"node_modules/redditapi/src/Client.js":"const Post = require('./Post');\r\nconst { get } = require('snekfetch');\r\n\r\n/**\r\n  * @param {string} subReddit The sub reddit to search for\r\n  * @param {number} amount The amount of searches to return\r\n  * @param {string} topic Either `hot`, `new`, `rising`, `controversial` or `top`\r\n  * @returns {Promise<Object>} Object containing posts for this sub reddit\r\n  */\r\n\r\nmodule.exports = (subReddit, amount, topic = 'new') => {\r\n  return new Promise(async (resolve, reject) => {\r\n    if (typeof subReddit !== 'string' || typeof subReddit === 'undefined') reject('You must supply a sub reddit to search for.');\r\n    typeof amount === 'undefined'\r\n      ? reject('You must supply an amount of posts to search for.')\r\n      : isNaN(parseInt(amount))\r\n      ? reject('Amount must be a number 0-9.')\r\n      : amount < 1 || amount > 24\r\n      ? reject('Amount must be between 1 and 25.')\r\n      : true;\r\n\r\n    const data = await get(`https://www.reddit.com/r/${subReddit}/${topic}.json`);\r\n    if (!data.body.data.children.length) reject('That sub reddit does not exist or there are no posts.');\r\n    resolve({\r\n      searches: data.body.data.children.length - 1,\r\n      posts: data.body.data.children.slice(25 - amount).map(post => new Post(post))\r\n    });\r\n  });\r\n};\r\n"},"lineCount":30}},"hash":"ab445ecede2b4b3d8271c8170acd972d","cacheData":{"env":{}}}